2020-10-16 19:10:55 CST INFO    download terraform binary
2020-10-16 19:10:55 CST INFO    downloading https://releases.hashicorp.com/terraform/0.12.13/terraform_0.12.13_darwin_amd64.zip
2020-10-16 19:14:46 CST INFO    downloading https://releases.hashicorp.com/terraform-provider-google/2.17.0/terraform-provider-google_2.17.0_darwin_amd64.zip
2020-10-16 19:15:38 CST INFO    downloading https://releases.hashicorp.com/terraform-provider-google-beta/2.17.0/terraform-provider-google-beta_2.17.0_darwin_amd64.zip
2020-10-16 19:16:30 CST INFO    terraform version
Terraform v0.12.13
+ provider.google v2.17.0
+ provider.google-beta v2.17.0
Activated service account credentials for: [terraform@gke-eu-1.iam.gserviceaccount.com]
2020-10-16 19:16:35 CST INFO    create a vpc network
Deleted [https://www.googleapis.com/compute/v1/projects/gke-eu-1/regions/europe-west2/subnetworks/vpc-tfbeta-europe-west2-gkenodes].
Deleted [https://www.googleapis.com/compute/v1/projects/gke-eu-1/regions/europe-west2/subnetworks/vpc-tfbeta-europe-west2-net1].
Deleted [https://www.googleapis.com/compute/v1/projects/gke-eu-1/global/networks/vpc-tfbeta].
Created [https://www.googleapis.com/compute/v1/projects/gke-eu-1/global/networks/vpc-tfbeta].
NAME        SUBNET_MODE  BGP_ROUTING_MODE  IPV4_RANGE  GATEWAY_IPV4
vpc-tfbeta  CUSTOM       REGIONAL

Instances on this network will not be reachable until firewall rules
are created. As an example, you can allow all internal traffic between
instances as well as SSH, RDP, and ICMP by running:

$ gcloud compute firewall-rules create <FIREWALL_NAME> --network vpc-tfbeta --allow tcp,udp,icmp --source-ranges <IP_RANGE>
$ gcloud compute firewall-rules create <FIREWALL_NAME> --network vpc-tfbeta --allow tcp:22,tcp:3389,icmp

2020-10-16 19:17:44 CST INFO    clean up terraform dir
2020-10-16 19:17:44 CST INFO    prepare main.tf, 1st version of this file does not have properties: purpose and role which are explicitly for proxy-only subnet
locals {
  subnets = {
    for subnet, value in var.subnets :
    subnet => {
      name : format("%s-%s-%s", value.network, value.region, subnet)
      description : value.description
      region : value.region
      network : value.network
      ip_cidr_range : value.ip_cidr_range
      private_ip_google_access : value.private_ip_google_access
      enable_flow_logs : true
      secondary_ip_ranges : [
        for name, cidr in value.secondary_ip_ranges :
        {
          range_name : name,
          ip_cidr_range : cidr
        }
      ]
    }
  }
}

resource "google_compute_subnetwork" "subnet" {
  for_each = local.subnets

  project                  = var.project
  network                  = each.value.network
  name                     = each.value.name
  description              = each.value.description
  region                   = each.value.region
  ip_cidr_range            = each.value.ip_cidr_range
  secondary_ip_range       = each.value.secondary_ip_ranges
  private_ip_google_access = each.value.private_ip_google_access
  enable_flow_logs         = each.value.enable_flow_logs
}
2020-10-16 19:17:44 CST INFO    prepare vars.tf, 1st version of this file does not have properties: purpose and role which are explicitly for proxy-only subnet
variable "project" {
  description = "project ID"
  type        = string
}

variable "subnets" {
  description = "subnet objects"
  type = map(object(
    {
      network : string
      region : string
      description : string
      ip_cidr_range : string
      private_ip_google_access : bool
      secondary_ip_ranges : map(string)
    }
  ))
}
2020-10-16 19:17:44 CST INFO    prepare subnets.auto.tfvars.json which will create 2 normal subnets
{
    "subnets": {
        "gkenodes": {
            "network": "vpc-tfbeta",
            "region": "europe-west2",
            "description": "gkenodes",
            "ip_cidr_range": "192.168.192.0/23",
            "private_ip_google_access": true,
            "secondary_ip_ranges": {
                "gkepods": "192.168.128.0/19",
                "gkeservices": "192.168.208.0/21"
            }
        },
        "net1": {
            "network": "vpc-tfbeta",
            "region": "europe-west2",
            "description": "net1",
            "ip_cidr_range": "192.168.0.0/20",
            "private_ip_google_access": true,
            "secondary_ip_ranges": {}
        }
    }
}
2020-10-16 19:17:44 CST INFO    terraform init

[0m[1mInitializing the backend...[0m

[0m[1mInitializing provider plugins...[0m

The following providers do not have any version constraints in configuration,
so the latest version was installed.

To prevent automatic upgrades to new major versions that may contain breaking
changes, it is recommended to add version = "..." constraints to the
corresponding provider blocks in configuration, with the constraint strings
suggested below.

* provider.google: version = "~> 2.17"

[0m[1m[32mTerraform has been successfully initialized![0m[32m[0m
[0m[32m
You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.[0m
2020-10-16 19:17:45 CST INFO    terraform plan
[0m[1mRefreshing Terraform state in-memory prior to plan...[0m
The refreshed state will be used to calculate this plan, but will not be
persisted to local or remote state storage.
[0m
[0m[1mgoogle_compute_subnetwork.subnet["net1"]: Refreshing state... [id=europe-west2/vpc-tfbeta-europe-west2-net1][0m
[0m[1mgoogle_compute_subnetwork.subnet["gkenodes"]: Refreshing state... [id=europe-west2/vpc-tfbeta-europe-west2-gkenodes][0m

------------------------------------------------------------------------

An execution plan has been generated and is shown below.
Resource actions are indicated with the following symbols:
  [32m+[0m create
[0m
Terraform will perform the following actions:

[1m  # google_compute_subnetwork.subnet["gkenodes"][0m will be created[0m[0m
[0m[32m  +[0m [0mresource "google_compute_subnetwork" "subnet" {
      [32m+[0m [0m[1m[0mcreation_timestamp[0m[0m       = (known after apply)
      [32m+[0m [0m[1m[0mdescription[0m[0m              = "gkenodes"
      [32m+[0m [0m[1m[0menable_flow_logs[0m[0m         = true
      [32m+[0m [0m[1m[0mfingerprint[0m[0m              = (known after apply)
      [32m+[0m [0m[1m[0mgateway_address[0m[0m          = (known after apply)
      [32m+[0m [0m[1m[0mid[0m[0m                       = (known after apply)
      [32m+[0m [0m[1m[0mip_cidr_range[0m[0m            = "192.168.192.0/23"
      [32m+[0m [0m[1m[0mname[0m[0m                     = "vpc-tfbeta-europe-west2-gkenodes"
      [32m+[0m [0m[1m[0mnetwork[0m[0m                  = "vpc-tfbeta"
      [32m+[0m [0m[1m[0mprivate_ip_google_access[0m[0m = true
      [32m+[0m [0m[1m[0mproject[0m[0m                  = "gke-eu-1"
      [32m+[0m [0m[1m[0mregion[0m[0m                   = "europe-west2"
      [32m+[0m [0m[1m[0msecondary_ip_range[0m[0m       = [
          [32m+[0m [0m{
              [32m+[0m [0mip_cidr_range = "192.168.128.0/19"
              [32m+[0m [0mrange_name    = "gkepods"
            },
          [32m+[0m [0m{
              [32m+[0m [0mip_cidr_range = "192.168.208.0/21"
              [32m+[0m [0mrange_name    = "gkeservices"
            },
        ]
      [32m+[0m [0m[1m[0mself_link[0m[0m                = (known after apply)
    }

[1m  # google_compute_subnetwork.subnet["net1"][0m will be created[0m[0m
[0m[32m  +[0m [0mresource "google_compute_subnetwork" "subnet" {
      [32m+[0m [0m[1m[0mcreation_timestamp[0m[0m       = (known after apply)
      [32m+[0m [0m[1m[0mdescription[0m[0m              = "net1"
      [32m+[0m [0m[1m[0menable_flow_logs[0m[0m         = true
      [32m+[0m [0m[1m[0mfingerprint[0m[0m              = (known after apply)
      [32m+[0m [0m[1m[0mgateway_address[0m[0m          = (known after apply)
      [32m+[0m [0m[1m[0mid[0m[0m                       = (known after apply)
      [32m+[0m [0m[1m[0mip_cidr_range[0m[0m            = "192.168.0.0/20"
      [32m+[0m [0m[1m[0mname[0m[0m                     = "vpc-tfbeta-europe-west2-net1"
      [32m+[0m [0m[1m[0mnetwork[0m[0m                  = "vpc-tfbeta"
      [32m+[0m [0m[1m[0mprivate_ip_google_access[0m[0m = true
      [32m+[0m [0m[1m[0mproject[0m[0m                  = "gke-eu-1"
      [32m+[0m [0m[1m[0mregion[0m[0m                   = "europe-west2"
      [32m+[0m [0m[1m[0msecondary_ip_range[0m[0m       = []
      [32m+[0m [0m[1m[0mself_link[0m[0m                = (known after apply)
    }

[0m[1mPlan:[0m 2 to add, 0 to change, 0 to destroy.[0m

------------------------------------------------------------------------

Note: You didn't specify an "-out" parameter to save this plan, so Terraform
can't guarantee that exactly these actions will be performed if
"terraform apply" is subsequently run.

2020-10-16 19:17:50 CST INFO    terraform apply
[0m[1mgoogle_compute_subnetwork.subnet["net1"]: Refreshing state... [id=europe-west2/vpc-tfbeta-europe-west2-net1][0m
[0m[1mgoogle_compute_subnetwork.subnet["gkenodes"]: Refreshing state... [id=europe-west2/vpc-tfbeta-europe-west2-gkenodes][0m
[0m[1mgoogle_compute_subnetwork.subnet["gkenodes"]: Creating...[0m[0m
[0m[1mgoogle_compute_subnetwork.subnet["net1"]: Creating...[0m[0m
[0m[1mgoogle_compute_subnetwork.subnet["net1"]: Still creating... [10s elapsed][0m[0m
[0m[1mgoogle_compute_subnetwork.subnet["gkenodes"]: Still creating... [10s elapsed][0m[0m
[0m[1mgoogle_compute_subnetwork.subnet["net1"]: Still creating... [20s elapsed][0m[0m
[0m[1mgoogle_compute_subnetwork.subnet["gkenodes"]: Still creating... [20s elapsed][0m[0m
[0m[1mgoogle_compute_subnetwork.subnet["net1"]: Creation complete after 20s [id=europe-west2/vpc-tfbeta-europe-west2-net1][0m[0m
[0m[1mgoogle_compute_subnetwork.subnet["gkenodes"]: Still creating... [30s elapsed][0m[0m
[0m[1mgoogle_compute_subnetwork.subnet["gkenodes"]: Creation complete after 31s [id=europe-west2/vpc-tfbeta-europe-west2-gkenodes][0m[0m
[0m[1m[32m
Apply complete! Resources: 2 added, 0 changed, 0 destroyed.[0m
2020-10-16 19:18:30 CST INFO    list subnets
NAME                              REGION        NETWORK     RANGE
vpc-tfbeta-europe-west2-gkenodes  europe-west2  vpc-tfbeta  192.168.192.0/23
vpc-tfbeta-europe-west2-net1      europe-west2  vpc-tfbeta  192.168.0.0/20
2020-10-16 19:18:33 CST INFO    change terraform module to add support for proxy-only subnets
2020-10-16 19:18:33 CST INFO    prepare main.tf, add google beta provider to main.tf
locals {
  subnets = {
    for subnet, value in var.subnets :
    subnet => {
      name : format("%s-%s-%s", value.network, value.region, subnet)
      description : value.description
      region : value.region
      network : value.network
      ip_cidr_range : value.ip_cidr_range
      private_ip_google_access : value.private_ip_google_access
      enable_flow_logs : value.purpose == "INTERNAL_HTTPS_LOAD_BALANCER" ? false : true
      secondary_ip_ranges : [
        for name, cidr in value.secondary_ip_ranges :
        {
          range_name : name,
          ip_cidr_range : cidr
        }
      ]
      purpose: value.purpose
      role: value.role
    }
  }
}

resource "google_compute_subnetwork" "subnet" {
  provider = google-beta
  for_each = local.subnets

  project                  = var.project
  network                  = each.value.network
  name                     = each.value.name
  description              = each.value.description
  region                   = each.value.region
  ip_cidr_range            = each.value.ip_cidr_range
  secondary_ip_range       = each.value.secondary_ip_ranges
  private_ip_google_access = each.value.private_ip_google_access
  enable_flow_logs         = each.value.enable_flow_logs
  purpose                  = each.value.purpose
  role                     = each.value.role
}
2020-10-16 19:18:33 CST INFO    prepare vars.tf, add properties purpose and role
variable "project" {
  description = "project ID"
  type        = string
}

variable "subnets" {
  description = "subnet objects"
  type = map(object(
    {
      network : string
      region : string
      description : string
      ip_cidr_range : string
      private_ip_google_access : bool
      secondary_ip_ranges : map(string)
      purpose : string
      role : string
    }
  ))
}
2020-10-16 19:18:33 CST INFO    prepare subnets.auto.tfvars.json which will maintain existing 2 normal subnets, create 1 normal and 2 proxy-only subnets
{
    "subnets": {
        "gkenodes": {
            "network": "vpc-tfbeta",
            "region": "europe-west2",
            "description": "gkenodes",
            "ip_cidr_range": "192.168.192.0/23",
            "private_ip_google_access": true,
            "secondary_ip_ranges": {
                "gkepods": "192.168.128.0/19",
                "gkeservices": "192.168.208.0/21"
            },
            "purpose": "",
            "role": ""
        },
        "net1": {
            "network": "vpc-tfbeta",
            "region": "europe-west2",
            "description": "net1",
            "ip_cidr_range": "192.168.0.0/20",
            "private_ip_google_access": true,
            "secondary_ip_ranges": {},
            "purpose": "",
            "role": ""
        },
        "net2": {
            "network": "vpc-tfbeta",
            "region": "europe-west2",
            "description": "net2",
            "ip_cidr_range": "192.168.32.0/20",
            "private_ip_google_access": true,
            "secondary_ip_ranges": {},
            "purpose": "",
            "role": ""
        },
        "lb1": {
            "network": "vpc-tfbeta",
            "region": "europe-west2",
            "description": "lb1",
            "ip_cidr_range": "192.168.230.0/24",
            "private_ip_google_access": false,
            "secondary_ip_ranges": {},
            "purpose": "INTERNAL_HTTPS_LOAD_BALANCER",
            "role": "ACTIVE"
        },
        "lb2": {
            "network": "vpc-tfbeta",
            "region": "europe-west2",
            "description": "lb2",
            "ip_cidr_range": "192.168.231.0/24",
            "private_ip_google_access": false,
            "secondary_ip_ranges": {},
            "purpose": "INTERNAL_HTTPS_LOAD_BALANCER",
            "role": "BACKUP"
        }
    }
}
2020-10-16 19:18:33 CST INFO    terraform version
Terraform v0.12.13
+ provider.google v2.17.0
2020-10-16 19:18:33 CST INFO    terraform init

[0m[1mInitializing the backend...[0m

[0m[1mInitializing provider plugins...[0m

The following providers do not have any version constraints in configuration,
so the latest version was installed.

To prevent automatic upgrades to new major versions that may contain breaking
changes, it is recommended to add version = "..." constraints to the
corresponding provider blocks in configuration, with the constraint strings
suggested below.

* provider.google: version = "~> 2.17"
* provider.google-beta: version = "~> 2.17"

[0m[1m[32mTerraform has been successfully initialized![0m[32m[0m
[0m[32m
You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.[0m
2020-10-16 19:18:34 CST INFO    terraform plan
[0m[1mRefreshing Terraform state in-memory prior to plan...[0m
The refreshed state will be used to calculate this plan, but will not be
persisted to local or remote state storage.
[0m
[0m[1mgoogle_compute_subnetwork.subnet["net1"]: Refreshing state... [id=europe-west2/vpc-tfbeta-europe-west2-net1][0m
[0m[1mgoogle_compute_subnetwork.subnet["gkenodes"]: Refreshing state... [id=europe-west2/vpc-tfbeta-europe-west2-gkenodes][0m

------------------------------------------------------------------------

An execution plan has been generated and is shown below.
Resource actions are indicated with the following symbols:
  [32m+[0m create
[0m
Terraform will perform the following actions:

[1m  # google_compute_subnetwork.subnet["lb1"][0m will be created[0m[0m
[0m[32m  +[0m [0mresource "google_compute_subnetwork" "subnet" {
      [32m+[0m [0m[1m[0mcreation_timestamp[0m[0m       = (known after apply)
      [32m+[0m [0m[1m[0mdescription[0m[0m              = "lb1"
      [32m+[0m [0m[1m[0menable_flow_logs[0m[0m         = false
      [32m+[0m [0m[1m[0mfingerprint[0m[0m              = (known after apply)
      [32m+[0m [0m[1m[0mgateway_address[0m[0m          = (known after apply)
      [32m+[0m [0m[1m[0mid[0m[0m                       = (known after apply)
      [32m+[0m [0m[1m[0mip_cidr_range[0m[0m            = "192.168.230.0/24"
      [32m+[0m [0m[1m[0mname[0m[0m                     = "vpc-tfbeta-europe-west2-lb1"
      [32m+[0m [0m[1m[0mnetwork[0m[0m                  = "vpc-tfbeta"
      [32m+[0m [0m[1m[0mprivate_ip_google_access[0m[0m = false
      [32m+[0m [0m[1m[0mproject[0m[0m                  = "gke-eu-1"
      [32m+[0m [0m[1m[0mpurpose[0m[0m                  = "INTERNAL_HTTPS_LOAD_BALANCER"
      [32m+[0m [0m[1m[0mregion[0m[0m                   = "europe-west2"
      [32m+[0m [0m[1m[0mrole[0m[0m                     = "ACTIVE"
      [32m+[0m [0m[1m[0msecondary_ip_range[0m[0m       = []
      [32m+[0m [0m[1m[0mself_link[0m[0m                = (known after apply)

      [32m+[0m [0mlog_config {
          [32m+[0m [0m[1m[0maggregation_interval[0m[0m = (known after apply)
          [32m+[0m [0m[1m[0mflow_sampling[0m[0m        = (known after apply)
          [32m+[0m [0m[1m[0mmetadata[0m[0m             = (known after apply)
        }
    }

[1m  # google_compute_subnetwork.subnet["lb2"][0m will be created[0m[0m
[0m[32m  +[0m [0mresource "google_compute_subnetwork" "subnet" {
      [32m+[0m [0m[1m[0mcreation_timestamp[0m[0m       = (known after apply)
      [32m+[0m [0m[1m[0mdescription[0m[0m              = "lb2"
      [32m+[0m [0m[1m[0menable_flow_logs[0m[0m         = false
      [32m+[0m [0m[1m[0mfingerprint[0m[0m              = (known after apply)
      [32m+[0m [0m[1m[0mgateway_address[0m[0m          = (known after apply)
      [32m+[0m [0m[1m[0mid[0m[0m                       = (known after apply)
      [32m+[0m [0m[1m[0mip_cidr_range[0m[0m            = "192.168.231.0/24"
      [32m+[0m [0m[1m[0mname[0m[0m                     = "vpc-tfbeta-europe-west2-lb2"
      [32m+[0m [0m[1m[0mnetwork[0m[0m                  = "vpc-tfbeta"
      [32m+[0m [0m[1m[0mprivate_ip_google_access[0m[0m = false
      [32m+[0m [0m[1m[0mproject[0m[0m                  = "gke-eu-1"
      [32m+[0m [0m[1m[0mpurpose[0m[0m                  = "INTERNAL_HTTPS_LOAD_BALANCER"
      [32m+[0m [0m[1m[0mregion[0m[0m                   = "europe-west2"
      [32m+[0m [0m[1m[0mrole[0m[0m                     = "BACKUP"
      [32m+[0m [0m[1m[0msecondary_ip_range[0m[0m       = []
      [32m+[0m [0m[1m[0mself_link[0m[0m                = (known after apply)

      [32m+[0m [0mlog_config {
          [32m+[0m [0m[1m[0maggregation_interval[0m[0m = (known after apply)
          [32m+[0m [0m[1m[0mflow_sampling[0m[0m        = (known after apply)
          [32m+[0m [0m[1m[0mmetadata[0m[0m             = (known after apply)
        }
    }

[1m  # google_compute_subnetwork.subnet["net2"][0m will be created[0m[0m
[0m[32m  +[0m [0mresource "google_compute_subnetwork" "subnet" {
      [32m+[0m [0m[1m[0mcreation_timestamp[0m[0m       = (known after apply)
      [32m+[0m [0m[1m[0mdescription[0m[0m              = "net2"
      [32m+[0m [0m[1m[0menable_flow_logs[0m[0m         = true
      [32m+[0m [0m[1m[0mfingerprint[0m[0m              = (known after apply)
      [32m+[0m [0m[1m[0mgateway_address[0m[0m          = (known after apply)
      [32m+[0m [0m[1m[0mid[0m[0m                       = (known after apply)
      [32m+[0m [0m[1m[0mip_cidr_range[0m[0m            = "192.168.32.0/20"
      [32m+[0m [0m[1m[0mname[0m[0m                     = "vpc-tfbeta-europe-west2-net2"
      [32m+[0m [0m[1m[0mnetwork[0m[0m                  = "vpc-tfbeta"
      [32m+[0m [0m[1m[0mprivate_ip_google_access[0m[0m = true
      [32m+[0m [0m[1m[0mproject[0m[0m                  = "gke-eu-1"
      [32m+[0m [0m[1m[0mpurpose[0m[0m                  = (known after apply)
      [32m+[0m [0m[1m[0mregion[0m[0m                   = "europe-west2"
      [32m+[0m [0m[1m[0msecondary_ip_range[0m[0m       = []
      [32m+[0m [0m[1m[0mself_link[0m[0m                = (known after apply)

      [32m+[0m [0mlog_config {
          [32m+[0m [0m[1m[0maggregation_interval[0m[0m = (known after apply)
          [32m+[0m [0m[1m[0mflow_sampling[0m[0m        = (known after apply)
          [32m+[0m [0m[1m[0mmetadata[0m[0m             = (known after apply)
        }
    }

[0m[1mPlan:[0m 3 to add, 0 to change, 0 to destroy.[0m

------------------------------------------------------------------------

Note: You didn't specify an "-out" parameter to save this plan, so Terraform
can't guarantee that exactly these actions will be performed if
"terraform apply" is subsequently run.

2020-10-16 19:18:44 CST INFO    terraform apply
[0m[1mgoogle_compute_subnetwork.subnet["net1"]: Refreshing state... [id=europe-west2/vpc-tfbeta-europe-west2-net1][0m
[0m[1mgoogle_compute_subnetwork.subnet["gkenodes"]: Refreshing state... [id=europe-west2/vpc-tfbeta-europe-west2-gkenodes][0m
[0m[1mgoogle_compute_subnetwork.subnet["net2"]: Creating...[0m[0m
[0m[1mgoogle_compute_subnetwork.subnet["lb2"]: Creating...[0m[0m
[0m[1mgoogle_compute_subnetwork.subnet["lb1"]: Creating...[0m[0m
[0m[1mgoogle_compute_subnetwork.subnet["net2"]: Still creating... [10s elapsed][0m[0m
[0m[1mgoogle_compute_subnetwork.subnet["net2"]: Still creating... [20s elapsed][0m[0m
[0m[1mgoogle_compute_subnetwork.subnet["net2"]: Creation complete after 26s [id=europe-west2/vpc-tfbeta-europe-west2-net2][0m[0m
[31m
[1m[31mError: [0m[0m[1mError creating Subnetwork: googleapi: Error 400: Invalid value for field 'resource.enableFlowLogs': 'false'. Invalid field set in subnetwork with purpose INTERNAL_HTTPS_LOAD_BALANCER., invalid[0m

[0m  on main.tf line 25, in resource "google_compute_subnetwork" "subnet":
  25: resource "google_compute_subnetwork" "subnet" [4m{[0m
[0m
[0m[0m
[31m
[1m[31mError: [0m[0m[1mError creating Subnetwork: googleapi: Error 400: Invalid value for field 'resource.enableFlowLogs': 'false'. Invalid field set in subnetwork with purpose INTERNAL_HTTPS_LOAD_BALANCER., invalid[0m

[0m  on main.tf line 25, in resource "google_compute_subnetwork" "subnet":
  25: resource "google_compute_subnetwork" "subnet" [4m{[0m
[0m
[0m[0m
2020-10-16 19:19:15 CST INFO    list subnets
NAME                              REGION        NETWORK     RANGE
vpc-tfbeta-europe-west2-gkenodes  europe-west2  vpc-tfbeta  192.168.192.0/23
vpc-tfbeta-europe-west2-net1      europe-west2  vpc-tfbeta  192.168.0.0/20
vpc-tfbeta-europe-west2-net2      europe-west2  vpc-tfbeta  192.168.32.0/20
Deleted [https://www.googleapis.com/compute/v1/projects/gke-eu-1/regions/europe-west2/subnetworks/vpc-tfbeta-europe-west2-gkenodes].
Deleted [https://www.googleapis.com/compute/v1/projects/gke-eu-1/regions/europe-west2/subnetworks/vpc-tfbeta-europe-west2-net1].
Deleted [https://www.googleapis.com/compute/v1/projects/gke-eu-1/regions/europe-west2/subnetworks/vpc-tfbeta-europe-west2-net2].
Deleted [https://www.googleapis.com/compute/v1/projects/gke-eu-1/global/networks/vpc-tfbeta].
